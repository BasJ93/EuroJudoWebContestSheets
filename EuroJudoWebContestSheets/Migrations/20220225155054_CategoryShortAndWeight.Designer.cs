// <auto-generated />
using EuroJudoWebContestSheets.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EuroJudoWebContestSheets.Migrations
{
    [DbContext(typeof(dbContext))]
    [Migration("20220225155054_CategoryShortAndWeight")]
    partial class CategoryShortAndWeight
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("EuroJudoWebContestSheets.Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CategoryName")
                        .HasColumnType("TEXT");

                    b.Property<int>("SheetSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Short")
                        .HasColumnType("TEXT");

                    b.Property<int>("TournamentID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Weight")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("EuroJudoWebContestSheets.Models.ContestSheetData", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CompeditorBlue")
                        .HasColumnType("TEXT");

                    b.Property<string>("CompeditorWhite")
                        .HasColumnType("TEXT");

                    b.Property<int>("Contest")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IponBlue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IponWhite")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShidoBlue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShidoWhite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("ShowSimpleScore")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TournamentID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WazaariBlue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("WazaariWhite")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("ContestSheetData");
                });

            modelBuilder.Entity("EuroJudoWebContestSheets.Models.Tournament", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("TournamentName")
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("EuroJudoWebContestSheets.Models.ContestSheetData", b =>
                {
                    b.HasOne("EuroJudoWebContestSheets.Models.Category", null)
                        .WithMany("SheetData")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EuroJudoWebContestSheets.Models.Category", b =>
                {
                    b.Navigation("SheetData");
                });
#pragma warning restore 612, 618
        }
    }
}
